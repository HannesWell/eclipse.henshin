/*******************************************************************************
 * Copyright (c) 2010 CWI Amsterdam, Technical University Berlin, 
 * Philipps-University Marburg and others. All rights reserved.
 * This program and the accompanying materials are made 
 * available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     CWI Amsterdam - initial API and implementation
 *******************************************************************************/
package org.eclipse.emf.henshin.statespace.prism;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.emf.henshin.model.Rule;
import org.eclipse.emf.henshin.statespace.State;
import org.eclipse.emf.henshin.statespace.StateSpace;
import org.eclipse.emf.henshin.statespace.Transition;
import org.eclipse.emf.henshin.statespace.validation.AbstractFileBasedValidator;
import org.eclipse.emf.henshin.statespace.validation.ValidationResult;

/**
 * PRISM state space validator.
 * @author Christian Krause
 */
public class PRISMStateSpaceValidator extends AbstractFileBasedValidator {
	
	// Cached the rates to be used in the generated PRISM code.
	private Map<StateSpace,Map<Rule,Double>> cachedRates = new HashMap<StateSpace,Map<Rule,Double>>();
	
	/*
	 * (non-Javadoc)
	 * @see org.eclipse.emf.henshin.statespace.validation.StateSpaceValidator#validate(org.eclipse.emf.henshin.statespace.StateSpace, org.eclipse.core.runtime.IProgressMonitor)
	 */
	@Override
	public ValidationResult validate(StateSpace stateSpace, IProgressMonitor monitor) throws Exception {
		
		monitor.beginTask("Verifying formula...", 10);
		
		// Parse the names and rates from the rule names.
		Map<Rule,String> names = new HashMap<Rule,String>();
		Map<Rule,Double> rates = new HashMap<Rule,Double>();
		Map<Rule,String> rateNames = new HashMap<Rule,String>();
		
		// Initialize the rates.
		for (Rule rule : stateSpace.getRules()) {
			String value = rule.getName();
			String name;
			int at = rule.getName().indexOf('@');
			if (at>=0) {
				try {
					name = value.substring(0,at).trim();
					rates.put(rule,Double.valueOf(value.substring(at+1).trim()));
				}
				catch(Throwable t) {
					throw new ParseException("Error parsing rate for rule '" + rule + "'",0);
				}				
			} else {
				name = value.trim();
			}
			names.put(rule, name);
			rateNames.put(rule, "r" + name.substring(0,1).toUpperCase() + name.substring(1));			
		}
		
		// If we have cached already some rates, we use those instead.
		if (cachedRates.containsKey(stateSpace)) {
			rates = cachedRates.get(stateSpace);
		} else {
			cachedRates.put(stateSpace, rates);
		}
		
		// We also ask the use if he wants to change the rates.
		try {
			Thread.sleep(500);
		} catch (Throwable t) {}
		try {
			SpecifyRatesDialog.open(names, rates, monitor);
		} catch (Throwable t) {
			System.err.println(t);
		}
		if (monitor.isCanceled()) {
			return null;
		}
		
		// Now we are ready to generate the PRIM file.		
		StringBuffer buffer = new StringBuffer();
		buffer.append("// CTMC model generated by Henshin on " + new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(new Date()) + "\n\n");
		buffer.append("ctmc\n\n");
		for (Rule rule : stateSpace.getRules()) {
			buffer.append("const double " + rateNames.get(rule) + (rates.containsKey(rule) ? rates.get(rule)+";\n" : ";\n"));
		}
		buffer.append("\nmodule Transformation\n\n");
		buffer.append("\ts : [0.." + stateSpace.getStates().size() + "] init " + stateSpace.getInitialStates().get(0).getIndex() + ";\n\n");
		for (State s : stateSpace.getStates()) {
			for (Transition t : s.getOutgoing()) {
				buffer.append("\t[" + names.get(t.getRule())+ "] s=" + s.getIndex() + 
							  " -> " + rateNames.get(t.getRule()) + 
							  " : (s'=" + t.getTarget().getIndex() + ");\n");
			}
		}
		buffer.append("endmodule\n");
		String content = buffer.toString();
		monitor.worked(1);
		
		// Dump the content into a temporary file.
		String filename = stateSpace.eResource()!=null ? 
				stateSpace.eResource().getURI().trimFileExtension().lastSegment() : "statespace";
		createTempFile(filename, ".sm", content);
		monitor.worked(1);
		
		
		
		return ValidationResult.VALID;
	}	
	
	/*
	 * (non-Javadoc)
	 * @see org.eclipse.emf.henshin.statespace.validation.Validator#getName()
	 */
	@Override
	public String getName() {
		return "PRISM";
	}
	
}
