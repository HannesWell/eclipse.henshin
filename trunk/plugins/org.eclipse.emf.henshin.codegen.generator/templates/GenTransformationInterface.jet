<%@ jet package="org.eclipse.emf.henshin.codegen.templates" 
		imports="org.eclipse.emf.henshin.codegen.model.* org.eclipse.emf.codegen.ecore.genmodel.*" 
		class="GenTransformationInterface"%><%

GenTransformation genTrafo = (GenTransformation) argument;
GenHenshin genHenshin = genTrafo.getGenHenshin();
String interfaceName = genHenshin.applyInterfacePattern(genTrafo.getTransformationClassFormatted());
String className = genHenshin.applyImplementationPattern(genTrafo.getTransformationClassFormatted());

String factoryInterface = genHenshin.applyInterfacePattern("Factory");
String factoryImplementation = genHenshin.applyImplementationPattern("Factory");

%><%=
genHenshin.getCopyrightComment()
%>
package <%= genHenshin.getInterfacePackage() %>;

import <%= genHenshin.getImplementationPackage() + "." + className %>;
<% for (GenPackage genPackage : genTrafo.getGenPackages()) { %>
import <%= genPackage.getInterfacePackageName()%>.*;
<% } %>
import org.eclipse.emf.ecore.EObject;

/**
 * @generated
 */
public interface <%= interfaceName %> {

	/**
	 * @generated
	 */
	public interface <%= factoryInterface %> {
		
		/**
		 * @generated
		 */
		<%= interfaceName %> createTransformation(EObject... roots);
		
	}

	/**
	 * @generated
	 */
	public static final <%= factoryInterface %> FACTORY = new <%= className + "." + factoryImplementation %>();

<% 
for (GenUnit genUnit : genTrafo.getGenUnits()) {
	if (!genUnit.isPublic()) continue;
%>
	/**
	 * @generated
	 */
<%= genUnit.getResultTypeInterface("\t") %>

	/**
	 * @generated
	 */
	<%= genUnit.getResultTypeName() + " " + 
		genUnit.getMethodFormatted() + "(" + 
		genUnit.getInputGenParametersFormatted() + ")" %>;
	
<%
}
%>
}
