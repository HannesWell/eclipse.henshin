<%@ jet package="org.eclipse.emf.henshin.codegen.templates" 
		imports="java.util.* org.eclipse.emf.henshin.codegen.model.* org.eclipse.emf.henshin.codegen.generator.internal.*" 
		class="GenUnitInterpreter"%><%

GenUnit genUnit = (GenUnit) argument;
boolean isRule = (genUnit instanceof GenRule);
GenTransformation genTrafo = genUnit.getGenTransformation();

String unitMethod = genUnit.getMethodFormatted();
String unitMethodCap = unitMethod.substring(0,1).toUpperCase() + unitMethod.substring(1);
String unitModelName = (isRule ? "RULE" : "UNIT") + "_" + unitMethod.toUpperCase();
String unitGetter = "get" + (isRule ? "Rule" : "Unit") + unitMethodCap;

// Unit model:

%>
	/**
	 * @generated
	 */
	protected static <%= (isRule ? "Rule" : "TransformationUnit") + " " + unitModelName %> = null;

	/**
	 * @generated
	 */
	protected <%= (isRule ? "Rule" : "TransformationUnit") + " " + unitGetter %>() {
		if (<%= unitModelName %>==null) {
			HenshinFactory factory = HenshinFactory.eINSTANCE;
<%=
		new UnitModelCodeGenerator(genTrafo,"factory").generate(genUnit, unitModelName, "\t\t\t")
%>		}
		return <%= unitModelName %>;
	}

<%

// Unit parameters:
String paramsString = "";
List<String> params = genUnit.getParametersFormatted();
for (int i=0; i<params.size(); i++) {
	paramsString = paramsString + "String " + params.get(i);
	if (i<params.size()-1) paramsString = paramsString + ", ";
}

// Visibility of the unit:
String visibility = genUnit.isPublic() ? "public" : "protected";

%>
	/**
	 * @generated
	 */
	<%= visibility %> boolean <%= genUnit.getMethodFormatted() + "(" + paramsString + ")" %> {
<% 
		String applicationType = isRule ? "RuleApplication" : "UnitApplication";
		%>
		<%= applicationType %> application = new <%= applicationType %>(engine, <%= unitGetter %>());
<%
		for (int i=0; i<params.size(); i++) {
%>
		application.setParameterValue("<%= genUnit.getUnit().getParameters().get(i).getName() %>", <%= params.get(i) %>);
<%
		}
%>
		return application.apply();
	}
