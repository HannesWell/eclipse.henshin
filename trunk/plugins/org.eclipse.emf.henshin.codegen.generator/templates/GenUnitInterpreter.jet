<%@ jet package="org.eclipse.emf.henshin.codegen.templates" 
		imports="java.util.* org.eclipse.emf.henshin.codegen.model.* org.eclipse.emf.henshin.codegen.generator.internal.*" 
		class="GenUnitInterpreter"%><%

GenUnit genUnit = (GenUnit) argument;
boolean isRule = (genUnit instanceof GenRule);
GenTransformation genTrafo = genUnit.getGenTransformation();

String unitMethod = genUnit.getMethodFormatted();
String unitMethodCap = unitMethod.substring(0,1).toUpperCase() + unitMethod.substring(1);
String unitModelName = (isRule ? "RULE" : "UNIT") + "_" + unitMethod.toUpperCase();
String unitGetter = "get" + (isRule ? "Rule" : "Unit") + unitMethodCap;

// Unit model:

%>
	/**
	 * @generated
	 */
	protected static <%= (isRule ? "Rule" : "TransformationUnit") + " " + unitModelName %> = null;

	/**
	 * @generated
	 */
	protected <%= (isRule ? "Rule" : "TransformationUnit") + " " + unitGetter %>() {
		if (<%= unitModelName %>==null) {
			HenshinFactory factory = HenshinFactory.eINSTANCE;
<%=
		new UnitModelCodeGenerator(genTrafo,"factory").generate(genUnit, unitModelName, "\t\t\t")
%>		}
		return <%= unitModelName %>;
	}

<%

// Visibility of the unit:
String visibility = genUnit.isPublic() ? "public" : "protected";

%>
	/**
	 * @generated
	 */
	<%= visibility + " " +
		genUnit.getResultTypeName() + " " + 
		genUnit.getMethodFormatted() + "(" + 
		genUnit.getInputGenParametersFormatted() + ")" %> {
<% 
		String applicationType = isRule ? "RuleApplication" : "UnitApplication";
		%>
		<%= applicationType %> application = new <%= applicationType %>(engine, <%= unitGetter %>());
<%
		for (GenParameter input : genUnit.getInputGenParameters()) {
%>
		application.setParameterValue("<%= input.getParameter().getName() %>", <%= input.getNameFormatted() %>);
<%
		}
%>
		return application.apply();
	}
