<?xml version='1.0' ?><!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V5.0//EN" "../lib/docbook-5.0.dtd" >

<chapter xml:id="AdvancedEditing">

	<title>Advanced Editing</title>

	<section>
		<para>
			The editor provides a variety of advanced editing commands. Based on
			the currently selected model-elements, the context-menu offers all
			applicable commands in a submenu named
			<emphasis>Advanced Editing</emphasis>
			. The following sections describe each command in detail, for which
			selection it will be available and how it alters the transformation
			model.
		</para>
	</section>

	<section>
		<title>Create Mapped Node</title>
		<para>
			<emphasis role="bold">Selection: </emphasis>
			Single Rule
		</para>
		<para>
			<emphasis role="bold">Effect:</emphasis>
			Creates two nodes in the selected rule. One in the LHS and one
			in the
			RHS. Creates a mapping from the LHS-node to the RHS-node.
		</para>
	</section>

	<section>
		<title>Create Edge</title>
		<para>
			<emphasis role="bold">Selection: </emphasis>
			Two Nodes in same graph.
		</para>
		<para>
			<emphasis role="bold">Effect:</emphasis>
			The menu will provide an actions for every known reference between
			the types of the selected nodes. If one is chosen, an edge will be
			created with the selected type. The edges source and target will
			reference the two selected nodes.
		</para>
		<para>
			The command checks for multiplicity and uniqueness of an edge.
			Therefore there may not be two equally-typed(and equally directed)
			edges between the two nodes. If a reference is not of a collection
			type(i.e. upperBound&lt;2) there must not be an outgoing edge of the
			same type from the node whose class contains the reference.
		</para>
		<para>
			Edges that may not be created for reasons of multiplicity or
			uniqueness violations are shown as disabled menu items. 
		</para>
	</section>

	<section>
		<title>Remove Origin/Image from ..</title>
		<para>
			<emphasis role="bold">Selection:</emphasis>
			Single Node in a rule's LHS or RHS. A LHS node must be mapped to a
			RHS node. A RHS node must be mapped from a LHS node.
		</para>
		<para>
			<emphasis role="bold">Effect:</emphasis>
			Removes the corresponding other node from the model.
		</para>
	</section>

	<section xml:id="CopySubgraph">
		<title>Copy to ..</title>
		<para>
			<emphasis role="bold">Selection:</emphasis>
			Multiple nodes contained in the same graph.
		</para>
		<para>
			<emphasis role="bold">Effect:</emphasis>
			Establishes a complete image of the selected subgraph structure in
			the target graph. The subgraph is defined by all selected nodes and
			all edges between them. If a node of the subgraph does not correspond
			to node in the target graph, the command adds a copy of the node to
			the target graph and creates a mapping between the two. If a node
			already corresponds to a node in the target graph, it is skipped. The
			same is done for all edges of the selected subgraph. This command can
			be used to create or to incrementally update a certain target
			graph.
		</para>
	</section>



	<section>
		<title>Define as Nested Condition</title>
		<para>
			<emphasis role="bold">Selection:</emphasis>
			Multiple nodes contained in the same LHS or NestedCondition graph.
		</para>
		<para>
			<emphasis role="bold">Effect:</emphasis>
			This creates a new NestedCondition inside the source graph and copies
			the selected subgraph
			to the NestedCondition's conclusion graph. In
			case there already is a formula present in the source graph, the menu
			provides two alternatives regarding the handling of the existing
			formula:
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">Replace current Formula</emphasis>
						removes the existing formula and inserts the newly created
						NestedCondition in its place.
					</para>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">Wrap with current Formula</emphasis>
						creates an And which holds the existing formula and the newly
						created NestedCondition as child elements.
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>

	<section>
		<title>Formula Commands</title>
		<section>
			<title>Negate Formula</title>
			<para>
				<emphasis role="bold">Selection: </emphasis>
				Single Formula
			</para>
			<para>
				<emphasis role="bold">Effect:</emphasis>
				Negates the formula by either inserting or removing a containing Not
				element. If a Not is negated it is replaced by its child element in
				its containing element.
			</para>
		</section>
		<section>
			<title>Toggle Junction Type</title>
			<para>
				<emphasis role="bold">Selection: </emphasis>
				Single BinaryFormula
			</para>
			<para>
				<emphasis role="bold">Effect:</emphasis>
				Replace an And formula with an Or formula and vice versa. The child
				elements of the original formula are moved to the new formula.
			</para>
		</section>
		<section>
			<title>Wrap in AND/OR</title>
			<para>
				<emphasis role="bold">Selection: </emphasis>
				Single Formula
			</para>
			<para>
				<emphasis role="bold">Effect:</emphasis>
				Replaces a formula by a newly created And or Or formula. The
				selected formula is added as child.
			</para>
		</section>
		<section>
			<title>Replace by child Left/Right</title>
			<para>
				<emphasis role="bold">Selection: </emphasis>
				Single BinaryFormula
			</para>
			<para>
				<emphasis role="bold">Effect:</emphasis>
				Replaces a formula by its left or right child in its container. The
				selected formula and its other child are removed from the model.
			</para>
		</section>
	</section>

	<section xml:id="CreatePath">
		<title>Create Path </title>
		<para>
			<emphasis role="bold">Selection: </emphasis>
			Single Graph or single Node
		</para>
		<para>
			<emphasis role="bold">Effect:</emphasis>
			Allows to create a graph path of arbitrary length by navigating the
			classes and references of the imported packages. This is done by
			unfolding a dynamic menu structure on demand. There are several
			different
			menu types:

			The
			<emphasis role="bold">Reference Selection</emphasis>
			offers all known references owned by the selected type. If the
			menu is
			shown for a node, this is done for the node's type.

			The
			<emphasis role="bold">Subclass Selection</emphasis>
			shows all classes that are compatible with the type of a selected
			reference.

			If the graph contains nodes whose type is one of those
			classes the menu will contain a section to
			<emphasis role="bold">connect</emphasis>
			the path to an existing node. If either a subclass or an existing
			node are selected the path may be created by selecting "Create" or
			"Connect". Also the path may be continued by selecting the
			corresponding ".. and expand" item.

			If the menu is opened for a graph
			an initial element has to be selected first. For this purpose there
			is an additional menu that allows selecting an imported package and
			one of its contained classes. The expansion of the path can now be
			done in the same manner as if the menu was initialized for an
			existing node.
			<figure xml:id="fig_CreatePath">
				<title>Create Path</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="img/CreatePath1.png"></imagedata>
					</imageobject>
				</mediaobject>
			</figure>
		</para>
	</section>


</chapter>