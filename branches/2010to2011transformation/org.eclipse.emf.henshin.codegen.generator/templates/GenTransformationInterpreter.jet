<%@ jet package="org.eclipse.emf.henshin.codegen.templates" 
		imports="org.eclipse.emf.henshin.codegen.model.* org.eclipse.emf.codegen.ecore.genmodel.*" 
		class="GenTransformationInterpreter"%><%

GenTransformation genTrafo = (GenTransformation) argument;
GenHenshin genHenshin = genTrafo.getGenHenshin();

String interfaceName = genHenshin.applyInterfacePattern(genTrafo.getTransformationClassFormatted());
String interfacePackage = genHenshin.getInterfacePackage();

String className = genHenshin.applyImplementationPattern(genTrafo.getTransformationClassFormatted());

String factoryInterface = genHenshin.applyInterfacePattern("Factory");
String factoryImplementation = genHenshin.applyImplementationPattern("Factory");

%><%=
genHenshin.getCopyrightComment()
%>
package <%= genHenshin.getImplementationPackage() %>;

<%
if (!genHenshin.isSuppressInterfaces()) {
%>
import <%= interfacePackage + "." + interfaceName %>;
<%
}

for (GenPackage genPackage : genTrafo.getGenPackages()) { %>
import <%= genPackage.getInterfacePackageName()%>.*;
<% } %>
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.henshin.matching.EmfGraph;
import org.eclipse.emf.henshin.interpreter.*;
import org.eclipse.emf.henshin.model.*;

/**
 * @generated
 */
public class <%= className + (genHenshin.isSuppressInterfaces() ? "" : " implements " + interfaceName) %> {

	/**
	 * @generated
	 */
	public static class <%= factoryImplementation %> implements <%= factoryInterface %> {
		
		/**
		 * @generated
		 */
		@Override
		public <%= interfaceName %> createTransformation(EObject... roots) {
			return new <%= className %>(roots);
		}
		
	}

	/** 
	 * Interpreter engine to be used.
	 * @generated
	 */
	private EmfEngine engine;
	
	/**
	 * Default constructor.
	 * @param roots Root objects of the model to be transformed. 
	 * @generated
	 */
	public <%= className %>(EObject... roots) {
		final EmfGraph graph = new EmfGraph();
		for (EObject root : roots) {
			graph.addRoot(root);
		}
		engine = new EmfEngine(graph);
	}
		
<% 
GenUnitInterpreter unitTemplate = new GenUnitInterpreter();
for (GenUnit genUnit : genTrafo.getGenUnits()) {
%>
<%= unitTemplate.generate(genUnit) %>
<%
}
%>
}
