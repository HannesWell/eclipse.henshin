Model Henshin

This model description is not a real EMF artifact. It was generated by the
org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's
code generator can be extended.
This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.

Package henshin <http://www.eclipse.org/emf/2011/Henshin>

  Class NamedElement
    Attribute name : EString

  Class DescribedElement
    Attribute description : EString

  Class TransformationSystem -> DescribedElement, NamedElement
    Reference rules : Rule<<0..*>>
    Reference imports : EPackage<<0..*>>
    Reference instances : Graph<<0..*>>
    Reference transformationUnits : TransformationUnit<<0..*>>
    Operation findUnitByName(EString) : TransformationUnit
    Operation findRuleByName(EString) : Rule

  Class Rule -> TransformationUnit
    Reference lhs : Graph<<1..1>>
    Reference rhs : Graph<<1..1>>
    Reference attributeConditions : AttributeCondition<<0..*>>
    Reference mappings : Mapping<<0..*>>
    Attribute checkDangling : EBoolean
    Attribute injectiveMatching : EBoolean
    Reference multiRules : Rule<<0..*>>
    Reference multiMappings : Mapping<<0..*>>
    Operation getNodeByName(EString, EBoolean) : Node
    Operation containsMapping(Node, Node) : EBoolean
    Operation containsMultiMapping(Node, Node) : EBoolean
    Operation getTransformationSystem() : TransformationSystem
    Operation getKernelRule() : Rule
    Operation getRootKernelRule() : Rule
    Operation getMultiRuleByName(EString) : Rule
    Operation getOriginInKernelRule(GraphElement) : GraphElement
    Operation removeEdge(Edge, EBoolean) : void
    Operation removeNode(Node, EBoolean) : void
    Operation getAllMultiRules() : Rule<<0..*>>

  Class AttributeCondition -> DescribedElement, NamedElement
    Reference rule : Rule<<1..1>>
    Attribute conditionText : EString

  Class Parameter -> DescribedElement, NamedElement
    Reference unit : TransformationUnit<<1..1>>

  Class Graph -> NamedElement
    Reference nodes : Node<<0..*>>
    Reference edges : Edge<<0..*>>
    Reference formula : Formula
    Operation removeEdge(Edge<<1..1>>) : void
    Operation removeNode(Node) : void
    Operation getContainerRule() : Rule
    Operation findNodesByType(EClass<<1..1>>) : Node<<0..*>>
    Operation findEdgesByType(EReference<<1..1>>) : Edge<<0..*>>
    Operation isLhs() : EBoolean
    Operation isRhs() : EBoolean
    Operation isHost() : EBoolean
    Operation isNestedCondition() : EBoolean

  Class GraphElement
    Operation getGraph() : Graph

  Class Mapping
    Reference origin : Node<<1..1>>
    Reference image : Node<<1..1>>

  Class Node -> NamedElement, GraphElement
    Reference type : EClass<<1..1>>
    Reference attributes : Attribute<<0..*>>
    Reference graph : Graph<<1..1>>
    Reference incoming : Edge<<0..*>>
    Reference outgoing : Edge<<0..*>>
    Reference /allEdges : Edge<<0..*>>
    Operation findOutgoingEdgesByType(EReference<<1..1>>) : Edge<<0..*>>
    Operation findIncomingEdgesByType(EReference<<1..1>>) : Edge<<0..*>>
    Operation findAttributeByType(EAttribute<<1..1>>) : Attribute
    Operation findOutgoingEdgeByType(Node<<1..1>>, EReference<<1..1>>) : Edge
    Operation findIncomingEdgeByType(Node<<1..1>>, EReference<<1..1>>) : Edge

  Class Attribute
    Reference type : EAttribute<<1..1>>
    Attribute value : EString
    Reference node : Node<<1..1>>

  Class Edge -> GraphElement
    Reference source : Node<<1..1>>
    Reference target : Node<<1..1>>
    Reference type : EReference<<1..1>>
    Reference graph : Graph<<1..1>>

  Class TransformationUnit -> DescribedElement, NamedElement
    Attribute activated : EBoolean
    Reference parameters : Parameter<<0..*>>
    Reference parameterMappings : ParameterMapping<<0..*>>
    Operation getSubUnits(EBoolean) : TransformationUnit<<0..*>>
    Operation getParameterByName(EString) : Parameter

  Class IndependentUnit -> TransformationUnit
    Reference subUnits : TransformationUnit<<0..*>>

  Class SequentialUnit -> TransformationUnit
    Reference subUnits : TransformationUnit<<0..*>>
    Attribute strict : EBoolean
    Attribute rollback : EBoolean

  Class ConditionalUnit -> TransformationUnit
    Reference if : TransformationUnit<<1..1>>
    Reference then : TransformationUnit<<1..1>>
    Reference else : TransformationUnit

  Class PriorityUnit -> TransformationUnit
    Reference subUnits : TransformationUnit<<0..*>>

  Class IteratedUnit -> TransformationUnit
    Reference subUnit : TransformationUnit<<1..1>>
    Attribute iterations : EString

  Class LoopUnit -> TransformationUnit
    Reference subUnit : TransformationUnit<<1..1>>

  Class NestedCondition -> Formula
    Reference conclusion : Graph<<1..1>>
    Reference mappings : Mapping<<0..*>>

  Class Formula
    Operation stringRepresentation(EBoolean) : EString

  Class UnaryFormula -> Formula
    Reference child : Formula<<1..1>>

  Class BinaryFormula -> Formula
    Reference left : Formula<<1..1>>
    Reference right : Formula<<1..1>>

  Class And -> BinaryFormula

  Class Or -> BinaryFormula

  Class Xor -> BinaryFormula

  Class Not -> UnaryFormula

  Class ParameterMapping
    Reference source : Parameter<<1..1>>
    Reference target : Parameter<<1..1>>

  Class Applicator -> TransformationUnit
