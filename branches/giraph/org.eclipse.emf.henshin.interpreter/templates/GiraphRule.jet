<%@ jet package="org.eclipse.emf.henshin.interpreter.giraph" class="GiraphRuleTemplate" 
imports="java.util.* org.eclipse.emf.henshin.model.* org.eclipse.emf.henshin.interpreter.info.* org.eclipse.emf.ecore.*" %>
<%

@SuppressWarnings("unchecked")
Map<String,Object> args = (Map<String,Object>) argument;

@SuppressWarnings("unchecked")
Map<Rule,GiraphRuleData> ruleData = (Map<Rule,GiraphRuleData>) args.get("ruleData");

Unit mainUnit = (Unit) args.get("mainUnit");
String className = (String) args.get("className");
String packageName = (String) args.get("packageName");
boolean logging = (Boolean) args.get("logging");
boolean useUUIDs = (Boolean) args.get("useUUIDs");

List<Unit> allUnits = new ArrayList<Unit>();
allUnits.add(mainUnit);
allUnits.addAll(mainUnit.getSubUnits(true));

List<Rule> rules = new ArrayList<Rule>(ruleData.keySet());

boolean needsEdgeFactory = false;
int maxCreatedNodes = 0;
for (GiraphRuleData data : ruleData.values()) {
  if (!data.changeInfo.getCreatedEdges().isEmpty()) {
    needsEdgeFactory = true;
  }
  maxCreatedNodes = Math.max(maxCreatedNodes, data.changeInfo.getCreatedNodes().size());
}

%>
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package <%= packageName %>;

import java.io.IOException;

import org.apache.giraph.aggregators.LongSumAggregator;
import org.apache.giraph.edge.Edge;
<% if (needsEdgeFactory) { %>
import org.apache.giraph.edge.EdgeFactory;
<% } %>
import org.apache.giraph.graph.BasicComputation;
import org.apache.giraph.graph.Vertex;
import org.apache.giraph.master.DefaultMasterCompute;
import org.apache.hadoop.io.ByteWritable;
import org.apache.hadoop.io.LongWritable;
<%if (logging) { %>
import org.apache.log4j.Logger;
<%} %>

/**
 * Generated implementation of the Henshin unit "<%= mainUnit.getName() %>".
 */
@Algorithm(
    name = "<%= mainUnit.getName() %>"
)
public class <%= className %> extends
  BasicComputation<HenshinUtil.VertexId, ByteWritable,
  ByteWritable, HenshinUtil.Match> {

  /**
   * Name of the rule application count aggregator.
   */
  public static final String AGGREGATOR_RULE_APPLICATIONS = "ruleApps";

  /**
   * Name of the node generation aggregator.
   */
  public static final String AGGREGATOR_NODE_GENERATION = "nodeGen";

  /**
   * Name of the application stack aggregator.
   */
  public static final String AGGREGATOR_APPLICATION_STACK = "appStack";
<%

Map<ENamedElement,String> typeConstants = GiraphUtil.getTypeConstants(mainUnit.getModule());
int value = 0;
for (ENamedElement type : typeConstants.keySet()) {
  %>

  /**
   * Type constant for "<%= type.getName() %>".
   */
  public static final ByteWritable <%= typeConstants.get(type) %>
    = new ByteWritable((byte) <%= value++ %>);
<%
}

Map<Unit,String> unitConstants = GiraphUtil.getUnitConstants(mainUnit);
value = 0;
for (Unit unit : unitConstants.keySet()) {
  %>

  /**
   * <%= (unit instanceof Rule) ? "Rule" : "Unit" %> constant for "<%= unit.getName() %>".
   */
  public static final int <%= unitConstants.get(unit) %> = <%= value++ %>;
<%
}

if (logging) {
%>

  /**
   * Logging support.
   */
  protected static final Logger LOG = Logger.getLogger(<%= className %>.class);
<% } %>

  /*
   * (non-Javadoc)
   * @see org.apache.giraph.graph.Computation#compute(
   *        org.apache.giraph.graph.Vertex, java.lang.Iterable)
   */
  @Override
  public void compute(
      Vertex<HenshinUtil.VertexId, ByteWritable, ByteWritable> vertex,
      Iterable<HenshinUtil.Match> matches) throws IOException {

    // Get the current application stack:
    HenshinUtil.ApplicationStack stack =
      getAggregatedValue(AGGREGATOR_APPLICATION_STACK);

    // Check if we should stop:
    if (stack.getStackSize() == 0) {
      long ruleApps = ((LongWritable)
        getAggregatedValue(AGGREGATOR_RULE_APPLICATIONS)).get();
      if (ruleApps == 0) {
        vertex.voteToHalt();
      }
      return;
    }

    // Get the last step:
    int rule = stack.getLastUnit();
    int microstep = stack.getLastMicrostep();
<%if (logging) { %>

    // Log execution info
    long superstep = getSuperstep();
    LOG.info("Vertex " + vertex.getId() + " in superstep " + superstep +
      " executing rule " + rule + " in microstep " + microstep);
    for (HenshinUtil.Match match : matches) {
      LOG.info("Vertex " + vertex.getId() +
        " received (partial) match " + match);
    }
<%} %>

    // Find out which rule to apply:
    switch (rule) {
<% for (Rule rule : rules) { %>
    case <%= unitConstants.get(rule) %>:
      match<%= rule.getName() %>(vertex, matches, microstep);
      break;
<% } %>
    default:
      throw new RuntimeException("Unknown rule: " + rule);
    }
  }
<%

// Generate the code for all rules: 
for (Rule rule : ruleData.keySet()) {
  GiraphRuleData data = ruleData.get(rule);
  RuleChangeInfo changeInfo = new RuleChangeInfo(rule);

%>

  /**
   * Match (and apply) the rule "<%= data.rule.getName() %>".
   * This takes <%= data.matchingSteps.size() %> microsteps.
   * @param vertex The current vertex.
   * @param matches The current matches.
   * @param microstep Current microstep.
   */
  protected void match<%= data.rule.getName() %>(
      Vertex<HenshinUtil.VertexId, ByteWritable, ByteWritable> vertex,
      Iterable<HenshinUtil.Match> matches,
      int microstep) throws IOException {


<% 
    for (int i=0; i<data.matchingSteps.size(); i++) {
      GiraphRuleData.MatchingStep step = data.matchingSteps.get(i);
%><%= i>0 ? " else" : "   " %> if (microstep == <%= i %>) {

<%    if (step.verifyEdgeTo != null) {%>
      // Node <%= GiraphUtil.getNodeName(step.edge.getSource()) %>: check for edge to match of <%= GiraphUtil.getNodeName(step.edge.getTarget()) %> of type "<%= step.edge.getType().getName() %>":
      for (HenshinUtil.Match match : matches) {
        HenshinUtil.VertexId targetId = match.getVertexId(<%= data.orderedLhsNodes.indexOf(step.verifyEdgeTo) %>);
        for (Edge<HenshinUtil.VertexId, ByteWritable> edge :
          vertex.getEdges()) {
          if (edge.getValue().get() ==
            <%= typeConstants.get(step.edge.getType()) %>.get() &&
            edge.getTargetVertexId().equals(targetId)) {
<%        if (i == data.matchingSteps.size()-1) {%>
            // Apply the rule:
            apply<%= data.rule.getName() %>(vertex, match);
<%        } %>
          }
        }
      }

<%    } else {%>
      // Matching node <%= GiraphUtil.getNodeName(step.node) %>. Type must be "<%= step.node.getType().getName() %>":
      boolean ok = vertex.getValue().get() ==
        <%= typeConstants.get(step.node.getType()) %>.get();
      if (ok) {
<%    if (step.isStart) {%>
        // Create a new partial match:
        HenshinUtil.Match match =
          new HenshinUtil.Match().append(vertex.getId());
        <% } else {%>
        // Extend all partial matches:
        for (HenshinUtil.Match match : matches) {
          match = match.append(vertex.getId());
<%    }
      if (step.edge != null) {%>
<%= !step.isStart ? "  " : ""%>        // Send a match request to all outgoing edges of type "<%= step.edge.getType().getName() %>":
<%= !step.isStart ? "  " : ""%>        for (Edge<HenshinUtil.VertexId, ByteWritable> edge :
<%= !step.isStart ? "  " : ""%>          vertex.getEdges()) {
<%= !step.isStart ? "  " : ""%>          if (edge.getValue().get() ==
<%= !step.isStart ? "  " : ""%>            <%= typeConstants.get(step.edge.getType()) %>.get()) {
<%if (logging) { %>
<%= !step.isStart ? "  " : ""%>            LOG.info("Vertex " + vertex.getId() +
<%= !step.isStart ? "  " : ""%>              " sending (partial) match " + match +
<%= !step.isStart ? "  " : ""%>              " to vertex " + edge.getTargetVertexId());
<%} %>
<%= !step.isStart ? "  " : ""%>            sendMessage(edge.getTargetVertexId(), match);
<%= !step.isStart ? "  " : ""%>          }
<%= !step.isStart ? "  " : ""%>        }
<%
      } else if (step.sendBackTo != null) {%>
          // Send the message back to matches of node <%= GiraphUtil.getNodeName(step.sendBackTo) %>:
          for (HenshinUtil.Match m : matches) {
            HenshinUtil.VertexId targetVertexId =
              m.getVertexId(<%= data.orderedLhsNodes.indexOf(step.sendBackTo) %>);
<%if (logging) { %>
            LOG.info("Vertex " + vertex.getId() +
              " sending (partial) match " + match +
              " to vertex " + targetVertexId);
<%} %>
            sendMessage(targetVertexId, match);
          }
<%
      } else if (i == data.matchingSteps.size()-1) {%>
          // Apply the rule:
          apply<%= data.rule.getName() %>(vertex, match);
<%    }
      if (!step.isStart) {%>
        }<%
       }%>
      } // end if ok
<%
      }%>

    }<% 

    } // end for

%>
  }

  /**
   * Apply the rule <%= data.rule.getName() %>to a given match.
   * @param vertex The base vertex.
   * @param match The match object.
   * @throws IOException On I/O errors.
   */
  protected void apply<%= data.rule.getName() %>(
    Vertex<HenshinUtil.VertexId, ByteWritable,
    ByteWritable> vertex,
    HenshinUtil.Match match) throws IOException {

<%if (logging) { %>
    LOG.info("Vertex " + vertex.getId() +
      " applying rule <%= data.rule.getName() %> with match " + match);

<%}
  for (int j = 0; j < data.orderedLhsNodes.size(); j++) {
    Node lhsNode = data.orderedLhsNodes.get(j);
    Node rhsNode = data.rule.getMappings().getImage(lhsNode, data.rule.getRhs());
    boolean needed = changeInfo.getDeletedNodes().contains(lhsNode);
    for (Edge edge : lhsNode.getAllEdges()) {
      needed = needed || changeInfo.getDeletedEdges().contains(edge);
    }
    if (rhsNode!=null) {
      for (Edge edge : rhsNode.getAllEdges()) {
        needed = needed || changeInfo.getCreatedEdges().contains(edge);
      }
    }
    if (needed) { %>
    HenshinUtil.VertexId cur<%= j %> = match.getVertexId(<%= j %>);
<%  }
  }

  for (Edge edge : changeInfo.getDeletedEdges()) {%>

    // Remove edge <%= GiraphUtil.getNodeName(edge.getSource()) %> -> <%= GiraphUtil.getNodeName(edge.getTarget()) %>:
    removeEdgesRequest(cur<%= data.orderedLhsNodes.indexOf(edge.getSource()) %>, cur<%= data.orderedLhsNodes.indexOf(edge.getTarget()) %>);
<%  }
    for (Node node : changeInfo.getDeletedNodes()) {%>

    // Remove vertex <%= GiraphUtil.getNodeName(node) %>:
    removeVertexRequest(cur<%= data.orderedLhsNodes.indexOf(node) %>);
<%  }

    int n = 0;
    for (Node node : changeInfo.getCreatedNodes()) {%>

    // Create vertex <%= GiraphUtil.getNodeName(node) %>:
    HenshinUtil.VertexId new<%= n %> =
<% if (useUUIDs) { %>
      HenshinUtil.VertexId.randomVertexId();
<% } else { %>
      deriveVertexId(vertex.getId(), (byte) <%= n %>);
<% } %>
    addVertexRequest(new<%= n++ %>, <%= typeConstants.get(node.getType()) %>);
<%  }

    int e = 0;
    for (Edge edge : changeInfo.getCreatedEdges()) { %>

    // Create edge <%= GiraphUtil.getNodeName(edge.getSource()) %> -> <%= GiraphUtil.getNodeName(edge.getTarget()) %>:
<%	// THE SOURCE OF THE NEW EDGE:
   	if (changeInfo.getCreatedNodes().contains(edge.getSource())) { %>
    HenshinUtil.VertexId src<%= e %> = new<%= changeInfo.getCreatedNodes().indexOf(edge.getSource()) %>;
<%	} else { %>
    HenshinUtil.VertexId src<%= e %> = cur<%= data.orderedLhsNodes.indexOf(data.rule.getMappings().getOrigin(edge.getSource())) %>;
<%	}
	// THE TARGET OF THE NEW EDGE:
   	if (changeInfo.getCreatedNodes().contains(edge.getTarget())) { %>
    HenshinUtil.VertexId trg<%= e %> = new<%= changeInfo.getCreatedNodes().indexOf(edge.getTarget()) %>;
<%	} else { %>
    HenshinUtil.VertexId trg<%= e %> = cur<%= data.orderedLhsNodes.indexOf(data.rule.getMappings().getOrigin(edge.getTarget())) %>;
<%	} %>
    Edge<HenshinUtil.VertexId, ByteWritable> edge<%= e %> =
      EdgeFactory.create(trg<%= e %>, <%= typeConstants.get(edge.getType()) %>);
    addEdgeRequest(src<%= e %>, edge<%= e %>);
<%  e++;
    } %>

    // Update the statistics:
    aggregate(AGGREGATOR_RULE_APPLICATIONS, new LongWritable(1));

  }
<%
} // end of for all rules
%>

<% if (!useUUIDs) { %>
  /**
   * Derive a new vertex Id from an exiting one.
   * @param baseId The base vertex Id.
   * @param vertexIndex The relative index of the new vertex.
   * @return The derived vertex Id.
   */
  private HenshinUtil.VertexId deriveVertexId(
    HenshinUtil.VertexId baseId, int vertexIndex) {
    long generation = ((LongWritable) getAggregatedValue(
        AGGREGATOR_NODE_GENERATION)).get();
    return baseId.append((byte) generation).append((byte) vertexIndex);
  }
<% } %>

  /**
   * Master compute which registers and updates the required aggregators.
   */
  public static class MasterCompute extends DefaultMasterCompute {

    @Override
    public void compute() {

      // Get the number of rule applications in the last superstep:
      long ruleApps = ((LongWritable)
        getAggregatedValue(AGGREGATOR_RULE_APPLICATIONS)).get();
<% if (logging) {%>
      if (getSuperstep() > 0) {
        LOG.info(ruleApps + " rule applications in superstep " +
          (getSuperstep() - 1));
      }
<% } %>
      if (ruleApps > 0) {
        long nodeGen = ((LongWritable)
          getAggregatedValue(AGGREGATOR_NODE_GENERATION)).get();
        setAggregatedValue(AGGREGATOR_NODE_GENERATION,
          new LongWritable(nodeGen + 1));
      }

      // Update the application stack:
      HenshinUtil.ApplicationStack stack;
      if (getSuperstep() == 0) {
        stack = new HenshinUtil.ApplicationStack();
        stack = stack.append(<%= unitConstants.get(mainUnit) %>, 0);
<% if (!(mainUnit instanceof Rule)) { %>
        stack = nextRuleStep(stack, ruleApps);
<% } %>
      } else {
        stack = getAggregatedValue(AGGREGATOR_APPLICATION_STACK);
        stack = nextRuleStep(stack, ruleApps);
      }
      setAggregatedValue(AGGREGATOR_APPLICATION_STACK, stack);

    }

    /**
     * Compute the next rule application stack.
     * @param stack Current application stack.
     * @param ruleApps Number of rule applications in last superstep.
     * @return the new application stack.
     */
    private HenshinUtil.ApplicationStack nextRuleStep(
      HenshinUtil.ApplicationStack stack, long ruleApps) {

      // Iteratively update the application stack:
      while (stack.getStackSize() > 0) {
        int unit = stack.getLastUnit();
        int microstep = stack.getLastMicrostep();
        stack = stack.removeLast();
        switch (unit) {
<% for (Unit unit : allUnits) { %>
        case <%= unitConstants.get(unit) %>:
<% if (unit instanceof IteratedUnit) { %>
          if (microstep < <%= Integer.parseInt(((IteratedUnit) unit).getIterations()) %>) {
            stack = stack.append(<%= unitConstants.get(unit) %>, microstep + 1);
            stack = stack.append(<%= unitConstants.get(((IteratedUnit) unit).getSubUnit()) %>, 0);
          }
<% } else if (unit instanceof SequentialUnit) { 
     SequentialUnit seq = (SequentialUnit) unit; %>
          switch (microstep) {
<% for (int i=0; i<seq.getSubUnits().size(); i++) { %>
          case <%= i%>:
            stack = stack.append(<%= unitConstants.get(unit) %>, <%= i+1 %>);
            stack = stack.append(<%= unitConstants.get(seq.getSubUnits().get(i)) %>, 0);
            break;
<% } %>
          default:
            break;
          }
<% } else if (unit instanceof LoopUnit) { %>
          if (ruleApps > 0) {
            stack = stack.append(<%= unitConstants.get(unit) %>, 0);
            stack = stack.append(<%= unitConstants.get(((LoopUnit) unit).getSubUnit()) %>, 0);
          }
<% } else if (unit instanceof Rule) { %>
          if (microstep < <%= ruleData.get(unit).matchingSteps.size() %>) {
            stack = stack.append(<%= unitConstants.get(unit) %>, microstep + 1);
          }
<% } %>
          break;
<% } %>
        default:
          throw new RuntimeException("Unknown unit " + unit);
        }

        // If the last unit is a rule, we can stop:
        if (stack.getStackSize() > 0) {
          unit = stack.getLastUnit();
<% for (int i=0; i<rules.size(); i++) { %>
          <%= i==0 ? "if (" : "  " %>unit == <%= unitConstants.get(rules.get(i)) + (i<rules.size()-1 ? " ||" : ") {" ) %>
<% } %>
            break;
          }
        }
      }
      return stack;
    }

    @Override
    public void initialize() throws InstantiationException,
        IllegalAccessException {
      registerAggregator(AGGREGATOR_RULE_APPLICATIONS,
        LongSumAggregator.class);
      registerPersistentAggregator(AGGREGATOR_NODE_GENERATION,
        LongSumAggregator.class);
      registerPersistentAggregator(AGGREGATOR_APPLICATION_STACK,
        HenshinUtil.ApplicationStackAggregator.class);
    }

  }
}
