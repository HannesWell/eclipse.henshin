<%@ jet package="org.eclipse.emf.henshin.interpreter.giraph" class="GiraphRuleTemplate" 
imports="java.util.* org.eclipse.emf.henshin.model.* org.eclipse.emf.henshin.interpreter.info.* org.eclipse.emf.ecore.*" %>
<%

@SuppressWarnings("unchecked")
Map<String,Object> args = (Map<String,Object>) argument;

GiraphRuleData data = (GiraphRuleData) args.get("data");

RuleChangeInfo changeInfo = new RuleChangeInfo(data.rule);

String className = (String) args.get("className");
String packageName = (String) args.get("packageName");
boolean logging = (Boolean) args.get("logging");
boolean useUUIDs = (Boolean) args.get("useUUIDs");
int applicationCount = (Integer) args.get("applicationCount");

%>
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package <%= packageName %>;

import java.io.IOException;

import org.apache.giraph.edge.Edge;
<% if (!changeInfo.getCreatedEdges().isEmpty()) { %>
import org.apache.giraph.edge.EdgeFactory;
<% } %>
import org.apache.giraph.graph.BasicComputation;
import org.apache.giraph.graph.Vertex;
import org.apache.hadoop.io.ByteWritable;
<%if (logging) { %>
import org.apache.log4j.Logger;
<%} %>

/**
 * Generated implementation of the Henshin rule "<%= data.rule.getName() %>".
 */
@Algorithm(
    name = "<%= data.rule.getName() %>"
)
public class <%= className %> extends
  BasicComputation<HenshinUtil.VertexId, ByteWritable,
  ByteWritable, HenshinUtil.Match> {

  /**
   * Default number of applications of this rule.
   */
  public static final int DEFAULT_APPLICATION_COUNT = <%= applicationCount %>;
<%
int value = 0;
for (ENamedElement type : data.typeConstants.keySet()) {
  %>

  /**
   * Type constant for "<%= type.getName() %>".
   */
  public static final ByteWritable <%= data.typeConstants.get(type) %>
    = new ByteWritable((byte) <%= value++ %>);
<%
}

if (logging) {
%>

  /**
   * Logging support.
   */
  private static final Logger LOG = Logger.getLogger(<%= className %>.class);
<% } %>

  /**
   * Number of applications of this rule.
   */
  private int applicationCount = DEFAULT_APPLICATION_COUNT;

  /*
   * (non-Javadoc)
   * @see org.apache.giraph.graph.Computation#compute(
   *        org.apache.giraph.graph.Vertex, java.lang.Iterable)
   */
  @Override
  public void compute(
      Vertex<HenshinUtil.VertexId, ByteWritable, ByteWritable> vertex,
      Iterable<HenshinUtil.Match> matches) throws IOException {

    // Get the current superstep:
    long superstep = getSuperstep();
<%if (logging) { %>
    LOG.info("Vertex " + vertex.getId() + " executing superstep " + superstep);
<%} %>

    // Check if we can stop:
    if (superstep >= applicationCount * <%= data.matchingSteps.size() %>) {
      vertex.voteToHalt();
      return;
    }

<%if (logging) { %>
    // Log received (partial) matches:
    for (HenshinUtil.Match match : matches) {
      LOG.info("Vertex " + vertex.getId() +
        " received (partial) match " + match);
    }
<%} %>

<% 
    for (int i=0; i<data.matchingSteps.size(); i++) {
      GiraphRuleData.MatchingStep step = data.matchingSteps.get(i);
%><%= i>0 ? " else" : "   " %> if (superstep % <%= data.matchingSteps.size() %> == <%= i %>) {

<%    if (step.verifyEdgeTo != null) {%>
      // Node <%= data.getNodeName(step.edge.getSource()) %>: check for edge to match of <%= data.getNodeName(step.edge.getTarget()) %> of type "<%= step.edge.getType().getName() %>":
      for (HenshinUtil.Match match : matches) {
        HenshinUtil.VertexId targetId = match.getVertexId(<%= data.orderedLhsNodes.indexOf(step.verifyEdgeTo) %>);
        for (Edge<HenshinUtil.VertexId, ByteWritable> edge :
          vertex.getEdges()) {
          if (edge.getValue().get() ==
            <%= data.typeConstants.get(step.edge.getType()) %>.get() &&
            edge.getTargetVertexId().equals(targetId)) {
<%        if (i == data.matchingSteps.size()-1) {%>
            // Apply the rule:
            applyRule(vertex, match);
<%        } %>
          }
        }
      }

<%    } else {%>
      // Matching node <%= data.getNodeName(step.node) %>. Type must be "<%= step.node.getType().getName() %>":
      boolean ok = vertex.getValue().get() ==
        <%= data.typeConstants.get(step.node.getType()) %>.get();
      if (ok) {
<%    if (step.isStart) {%>
        // Create a new partial match:
        HenshinUtil.Match match =
          new HenshinUtil.Match().append(vertex.getId());
        <% } else {%>
        // Extend all partial matches:
        for (HenshinUtil.Match match : matches) {
          match = match.append(vertex.getId());
<%    }
      if (step.edge != null) {%>
<%= !step.isStart ? "  " : ""%>        // Send a match request to all outgoing edges of type "<%= step.edge.getType().getName() %>":
<%= !step.isStart ? "  " : ""%>        for (Edge<HenshinUtil.VertexId, ByteWritable> edge :
<%= !step.isStart ? "  " : ""%>          vertex.getEdges()) {
<%= !step.isStart ? "  " : ""%>          if (edge.getValue().get() ==
<%= !step.isStart ? "  " : ""%>            <%= data.typeConstants.get(step.edge.getType()) %>.get()) {
<%if (logging) { %>
<%= !step.isStart ? "  " : ""%>            LOG.info("Vertex " + vertex.getId() +
<%= !step.isStart ? "  " : ""%>              " sending (partial) match " + match +
<%= !step.isStart ? "  " : ""%>              " to vertex " + edge.getTargetVertexId());
<%} %>
<%= !step.isStart ? "  " : ""%>            sendMessage(edge.getTargetVertexId(), match);
<%= !step.isStart ? "  " : ""%>          }
<%= !step.isStart ? "  " : ""%>        }
<%
      } else if (step.sendBackTo != null) {%>
          // Send the message back to matches of node <%= data.getNodeName(step.sendBackTo) %>:
          for (HenshinUtil.Match m : matches) {
            HenshinUtil.VertexId targetVertexId =
              m.getVertexId(<%= data.orderedLhsNodes.indexOf(step.sendBackTo) %>);
<%if (logging) { %>
            LOG.info("Vertex " + vertex.getId() +
              " sending (partial) match " + match +
              " to vertex " + targetVertexId);
<%} %>
            sendMessage(targetVertexId, match);
          }
<%
      } else if (i == data.matchingSteps.size()-1) {%>
          // Apply the rule:
          applyRule(vertex, match);
<%    }
      if (!step.isStart) {%>
        }<%
       }%>
      } // end if ok
<%
      if (i < data.matchingSteps.size()-1) {%>

      // In the last iteration the vertex can be made inactive:
      if (superstep / <%= data.matchingSteps.size() %> == applicationCount - 1) {
        vertex.voteToHalt();
      }
<%    }
      }%>

    }<% 

    } // end for

%>

  }

  /**
   * Apply the rule to a given match.
   * @param vertex The base vertex.
   * @param match The match object.
   * @throws IOException On I/O errors.
   */
  private void applyRule(Vertex<HenshinUtil.VertexId, ByteWritable,
    ByteWritable> vertex, HenshinUtil.Match match) throws IOException {

<%if (logging) { %>
    LOG.info("Vertex " + vertex.getId() +
      " applying rule with match " + match);

<%}
  for (int j = 0; j < data.orderedLhsNodes.size(); j++) {
    Node lhsNode = data.orderedLhsNodes.get(j);
    Node rhsNode = data.rule.getMappings().getImage(lhsNode, data.rule.getRhs());
    boolean needed = changeInfo.getDeletedNodes().contains(lhsNode);
    for (Edge edge : lhsNode.getAllEdges()) {
      needed = needed || changeInfo.getDeletedEdges().contains(edge);
    }
    if (rhsNode!=null) {
      for (Edge edge : rhsNode.getAllEdges()) {
        needed = needed || changeInfo.getCreatedEdges().contains(edge);
      }
    }
    if (needed) { %>
    HenshinUtil.VertexId cur<%= j %> = match.getVertexId(<%= j %>);
<%  }
  }

  for (Edge edge : changeInfo.getDeletedEdges()) {%>

    // Remove edge <%= data.getNodeName(edge.getSource()) %> -> <%= data.getNodeName(edge.getTarget()) %>:
    removeEdgesRequest(cur<%= data.orderedLhsNodes.indexOf(edge.getSource()) %>, cur<%= data.orderedLhsNodes.indexOf(edge.getTarget()) %>);
<%  }
    for (Node node : changeInfo.getDeletedNodes()) {%>

    // Remove vertex <%= data.getNodeName(node) %>:
    removeVertexRequest(cur<%= data.orderedLhsNodes.indexOf(node) %>);
<%  }

    int n = 0;
    for (Node node : changeInfo.getCreatedNodes()) {%>

    // Create vertex <%= data.getNodeName(node) %>:
    HenshinUtil.VertexId new<%= n %> =
<% if (useUUIDs) { %>
      HenshinUtil.VertexId.randomVertexId();
<% } else { %>
      deriveVertexId(vertex.getId(), (byte) <%= n %>);
<% } %>
    addVertexRequest(new<%= n++ %>, <%= data.typeConstants.get(node.getType()) %>);
<%  }

    int e = 0;
    for (Edge edge : changeInfo.getCreatedEdges()) { %>

    // Create edge <%= data.getNodeName(edge.getSource()) %> -> <%= data.getNodeName(edge.getTarget()) %>:
<%	// THE SOURCE OF THE NEW EDGE:
   	if (changeInfo.getCreatedNodes().contains(edge.getSource())) { %>
    HenshinUtil.VertexId src<%= e %> = new<%= changeInfo.getCreatedNodes().indexOf(edge.getSource()) %>;
<%	} else { %>
    HenshinUtil.VertexId src<%= e %> = cur<%= data.orderedLhsNodes.indexOf(data.rule.getMappings().getOrigin(edge.getSource())) %>;
<%	}
	// THE TARGET OF THE NEW EDGE:
   	if (changeInfo.getCreatedNodes().contains(edge.getTarget())) { %>
    HenshinUtil.VertexId trg<%= e %> = new<%= changeInfo.getCreatedNodes().indexOf(edge.getTarget()) %>;
<%	} else { %>
    HenshinUtil.VertexId trg<%= e %> = cur<%= data.orderedLhsNodes.indexOf(data.rule.getMappings().getOrigin(edge.getTarget())) %>;
<%	} %>
    Edge<HenshinUtil.VertexId, ByteWritable> edge<%= e %> =
      EdgeFactory.create(trg<%= e %>, <%= data.typeConstants.get(edge.getType()) %>);
    addEdgeRequest(src<%= e %>, edge<%= e %>);
<%  e++;
    } %>

  }

<% if (!useUUIDs) { %>
  /**
   * Derive a new vertex Id from an exiting one.
   * @param baseId The base vertex Id.
   * @param vertexIndex The relative index of the new vertex.
   * @return The derived vertex Id.
   */
  private HenshinUtil.VertexId deriveVertexId(
    HenshinUtil.VertexId baseId, int vertexIndex) {
<%
    int createdNodes = changeInfo.getCreatedNodes().size();
    int bitsNeededForIndex = 0;
    while (createdNodes > 0) {
      createdNodes = createdNodes / 2;
      bitsNeededForIndex++;
    }
%>
    int appCount = applicationCount;
    int bitsNeededForApp = 0;
    while (appCount > 0) {
      appCount = appCount / 2;
      bitsNeededForApp++;
    }
    long code = (getSuperstep() + 1) / <%= data.matchingSteps.size() %>;
    if (bitsNeededForApp <= <%= 8 - bitsNeededForIndex %>) {
      code = ((code << <%= bitsNeededForIndex %>)) | vertexIndex;
      return baseId.append((byte) code);
    } else {
      return baseId.append((byte) code).append((byte) vertexIndex);
    }
  }
<% } %>

  /**
   * Get the number of application to be executed for this rule.
   * @return the number of rule applications.
   */
  public int getApplicationCount() {
    return applicationCount;
  }

  /**
   * Set the number of application to be executed for this rule.
   * @param applicationCount The new number of rule applications.
   */
  public void setApplicationCount(int applicationCount) {
    this.applicationCount = applicationCount;
  }

}
