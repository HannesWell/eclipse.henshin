<%@ jet package="org.eclipse.emf.henshin.interpreter.ui.giraph" class="InputFormatTemplate" %>

import com.google.common.collect.Lists;
import org.apache.giraph.edge.Edge;
import org.apache.giraph.edge.EdgeFactory;
import org.apache.giraph.graph.Vertex;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.json.JSONArray;
import org.json.JSONException;

import java.io.IOException;
import java.util.List;

/**
  * VertexInputFormat that features <code>long</code> vertex ID's,
  * <code>int</code> vertex values and <code>int</code>
  * edge values, and <code>byte</code>-array message types,
  * specified in JSON format.
  */
public class JsonLongIntIntBytesVertexInputFormat extends TextVertexInputFormat<LongWritable, IntWritable, IntWritable> {

  @Override
  public TextVertexReader createVertexReader(InputSplit split, TaskAttemptContext context) {
    return new JsonLongDoubleFloatDoubleVertexReader();
  }

 /**
  * VertexReader that features <code>int</code> vertex
  * values and <code>int</code> out-edge values. The
  * files should be in the following JSON format:
  * JSONArray(<vertex id>, <vertex value>,
  *   JSONArray(JSONArray(<dest vertex id>, <edge value>), ...))
  * Here is an example with vertex id 1, vertex value 4, and two edges.
  * First edge has a destination vertex 2, edge value 5.
  * Second edge has a destination vertex 3, edge value 7.
  * [1,4,[[2,5],[3,7]]]
  */
  class JsonLongIntIntBytesVertexReader extends
    TextVertexReaderFromEachLineProcessedHandlingExceptions<JSONArray,JSONException> {

    @Override
    protected JSONArray preprocessLine(Text line) throws JSONException {
      return new JSONArray(line.toString());
    }

    @Override
    protected LongWritable getId(JSONArray jsonVertex) throws JSONException, IOException {
      return new LongWritable(jsonVertex.getLong(0));
    }

    @Override
    protected IntWritable getValue(JSONArray jsonVertex) throws JSONException, IOException {
      return new IntWritable(jsonVertex.getInt(1));
    }

    @Override
    protected Iterable<Edge<LongWritable, IntWritable>> getEdges(JSONArray jsonVertex) throws JSONException, IOException {
      JSONArray jsonEdgeArray = jsonVertex.getJSONArray(2);
      List<Edge<LongWritable, IntWritable>> edges = Lists.newArrayListWithCapacity(jsonEdgeArray.length());
      for (int i = 0; i < jsonEdgeArray.length(); ++i) {
        JSONArray jsonEdge = jsonEdgeArray.getJSONArray(i);
        edges.add(EdgeFactory.create(new LongWritable(jsonEdge.getLong(0)),
            new IntWritable(jsonEdge.getInt(1))));
      }
      return edges;
    }

    @Override
    protected Vertex<LongWritable, IntWritable, IntWritable>
    handleException(Text line, JSONArray jsonVertex, JSONException e) {
      throw new IllegalArgumentException(
          "Couldn't get vertex from line " + line, e);
    }

  }
}
