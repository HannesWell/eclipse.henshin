<%@ jet package="org.eclipse.emf.henshin.interpreter.ui.giraph" class="GiraphRuleTemplate" 
imports="java.util.* org.eclipse.emf.henshin.model.* org.eclipse.emf.henshin.interpreter.info.* org.eclipse.emf.henshin.interpreter.ui.giraph.GiraphUtil org.eclipse.emf.henshin.interpreter.ui.giraph.GiraphUtil.MatchingStep org.eclipse.emf.ecore.*" %>
<%

@SuppressWarnings("unchecked")
Map<String,Object> args = (Map<String,Object>) argument;

Rule rule = (Rule) args.get("rule");
RuleChangeInfo changeInfo = new RuleChangeInfo(rule);

String className = (String) args.get("className");

Map<ENamedElement,String> typeConstants = GiraphUtil.getTypeConstants(rule.getModule());
List<MatchingStep> matchingSteps = GiraphUtil.getMatchingSteps(rule);

List<Node> orderedLhsNodes = new ArrayList<Node>();
for (MatchingStep step : matchingSteps) {
  if (step.node!=null && !orderedLhsNodes.contains(step.node)) {
    orderedLhsNodes.add(step.node);
  }
}

%>
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.giraph.examples;

import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;

import org.apache.giraph.edge.Edge;
import org.apache.giraph.edge.EdgeFactory;
import org.apache.giraph.graph.BasicComputation;
import org.apache.giraph.graph.Vertex;
import org.apache.giraph.io.formats.TextVertexInputFormat;
import org.apache.giraph.io.formats.TextVertexOutputFormat;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;

import com.google.common.collect.Lists;

/**
 * Generated implementation of the Henshin rule "<%= rule.getName() %>".
 */
@Algorithm(
    name = "<%= rule.getName() %>"
)
public class <%= className %> extends
  BasicComputation<BytesWritable, IntWritable, IntWritable, BytesWritable> {
<%
int value = 0;
for (ENamedElement type : typeConstants.keySet()) {
  %>

  /**
   * Type constant for "<%= type.getName() %>".
   */
  public static final int <%= typeConstants.get(type) %> = <%= value++ %>;
<%
}
%>

  /**
   * Logging support.
   */
  private static final Logger LOG = Logger.getLogger(<%= className %>.class);

  /**
   * Empty byte array.
   */
  private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];

  /*
   * (non-Javadoc)
   * @see org.apache.giraph.graph.Computation#compute(
   *        org.apache.giraph.graph.Vertex, java.lang.Iterable)
   */
  @Override
  public void compute(
      Vertex<BytesWritable, IntWritable, IntWritable> vertex,
      Iterable<BytesWritable> matches) throws IOException {

    long superstep = getSuperstep();

    // Log partial matches:
    LOG.info("Superstep " + superstep + ": current partial matches are...");
    for (BytesWritable match : matches) {
      LOG.info("  " + matchToString(match));
    }


<% 
    for (int i=0; i<matchingSteps.size(); i++) {
      MatchingStep step = matchingSteps.get(i);
%><%= i>0 ? " else" : "   " %> if (superstep == <%= i %>) {

<%    if (step.verifyEdgeTo >= 0) {%>
      // Node <%= GiraphUtil.getNodeName(step.edge.getSource()) %>: check for edge to match of <%= GiraphUtil.getNodeName(step.edge.getTarget()) %> of type "<%= step.edge.getType().getName() %>":
      List<BytesWritable> validMatches = new ArrayList<BytesWritable>();
      Iterator<BytesWritable> it = matches.iterator();
      while (it.hasNext()) {
        BytesWritable match = it.next();
        BytesWritable targetId = getMatchVertexId(match, <%= step.verifyEdgeTo %>);
        for (Edge<BytesWritable, IntWritable> edge : vertex.getEdges()) {
          if (edge.getValue().get() == <%= typeConstants.get(step.edge.getType()) %> &&
              edge.getTargetVertexId().equals(targetId)) {
            validMatches.add(match);
            break;
          }
        }
      }
      matches = validMatches;

<%    } else {%>
      // Matching node <%= GiraphUtil.getNodeName(step.node) %>. Type must be "<%= step.node.getType().getName() %>":
      boolean ok = vertex.getValue().get() == <%= typeConstants.get(step.node.getType()) %>;
      if (ok) {
<%    if (i == 0) {%>
        // Create a new partial match:
        BytesWritable match = addMatchVertex(null, vertex.getId());
        <% } else {%>
        // Extend all partial matches:
        for (BytesWritable match : matches) {
          match = addMatchVertex(match, vertex.getId());
<%    }
      if (step.edge != null) {%>
<%= i > 0 ? "  " : ""%>        // Send a match request to all outgoing edges of type "<%= step.edge.getType().getName() %>":
<%= i > 0 ? "  " : ""%>        for (Edge<BytesWritable, IntWritable> edge : vertex.getEdges()) {
<%= i > 0 ? "  " : ""%>          if (edge.getValue().get() == <%= typeConstants.get(step.edge.getType()) %>) {
<%= i > 0 ? "  " : ""%>            sendMessage(edge.getTargetVertexId(), match);
<%= i > 0 ? "  " : ""%>          }
<%= i > 0 ? "  " : ""%>        }
<%    } else if (step.sendBackTo >= 0) {%>
          // Send the message back to matches of node <%= GiraphUtil.getNodeName(matchingSteps.get(step.sendBackTo).node) %>:
          for (BytesWritable m : matches) {
            sendMessage(getMatchVertexId(m, <%= step.sendBackTo %>), match);
          }
<%    }
      if (i>0) {%>
        }<%
       }%>
      } // end if ok

<%    }
      if (i == matchingSteps.size()-1) {%>

      // Apply rule for all matches:
      for (BytesWritable match : matches) {
        applyRule(vertex, match);
      }
<%
      }%>
    }<% 
    } // end for
%>
    // Next nodes are activated by a message, so we can put this one to sleep:
    vertex.voteToHalt();

  }

  /**
   * Pretty-print a match.
   * @param match The Match to be printed.
   * @return The printed string.
   */
  private static String matchToString(BytesWritable match) {
    if (match == null) {
      return "empty";
    }
    byte[] bytes = match.getBytes();
    StringBuffer r = new StringBuffer();
    for (int e = 0; e < bytes.length; e++) {
      r.append(bytes[e] + " ");
    }
    return r.toString();
  }

  /**
   * Get the vertex ID of a matched node.
   * @param match The match oject.
   * @param vertexIndex Index of the next vertex.
   * @return The vertex ID.
   */
  private static BytesWritable getMatchVertexId(BytesWritable match,
    int vertexIndex) {
    byte[] bytes = match.getBytes();
    int d = 0;
    for (int i = 0; i < vertexIndex; i++) {
      d += bytes[d] + 1;
    }
    return new BytesWritable(Arrays.copyOfRange(bytes, d + 1, bytes[d]));
  }

  /**
   * Extend a partial match.
   * @param match The match object.
   * @param vertexId The ID of the next matched vertex.
   * @return The extended match object.
   */
  private BytesWritable addMatchVertex(BytesWritable match,
    BytesWritable vertexId) {
    byte[] bytes = (match != null) ? match.getBytes() : EMPTY_BYTE_ARRAY;
    byte[] id = vertexId.getBytes();
    int superstep = (int) getSuperstep();
    int d = 0;
    for (int i = 0; i < superstep; i++) {
      d += bytes[d] + 1;
    }
    byte[] result = Arrays.copyOf(bytes, d + 1 + id.length);
    result[d] = (byte) id.length;
    System.arraycopy(id, 0, result, d + 1, id.length);
    BytesWritable theResult = new BytesWritable(result);
    LOG.info("Extending match: " + matchToString(match) +
      " -> " + matchToString(theResult));
    return theResult;
  }

  /**
   * Apply the rule to a given match.
   * @param vertex The base vertex.
   * @param match The match object.
   * @throws IOException On I/O errors.
   */
  private void applyRule(Vertex<BytesWritable, IntWritable,
    IntWritable> vertex, BytesWritable match) throws IOException {

    LOG.info("Applying rule <%= className %> with match " + matchToString(match));
<%  for (Edge edge : changeInfo.getDeletedEdges()) {%>

    // Remove edge <%= GiraphUtil.getNodeName(edge.getSource()) %> -> <%= GiraphUtil.getNodeName(edge.getTarget()) %>:
    removeEdgesRequest(
      getMatchVertexId(match, <%= orderedLhsNodes.indexOf(edge.getSource()) %>),
      getMatchVertexId(match, <%= orderedLhsNodes.indexOf(edge.getTarget()) %>)
    );
<%  }
    for (Node node : changeInfo.getDeletedNodes()) {%>

    // Remove vertex <%= GiraphUtil.getNodeName(node) %>:
    removeVertexRequest(
      getMatchVertexId(match, <%= orderedLhsNodes.indexOf(node) %>)
    );
<%  } 

    if (!changeInfo.getCreatedNodes().isEmpty()) {
%>
    byte[] thisVertexId = vertex.getId().getBytes();
    byte[] newVertexId;
<%	}
    int n = 0;
    for (Node node : changeInfo.getCreatedNodes()) {%>

    // Create vertex <%= GiraphUtil.getNodeName(node) %>:
    newVertexId = Arrays.copyOf(thisVertexId, thisVertexId.length + 1);
    newVertexId[newVertexId.length - 1] = <%= n++ %>;
    addVertexRequest(new BytesWritable(newVertexId),
      new IntWritable(<%= typeConstants.get(node.getType()) %>));
<%  }

    int e = 0;
    for (Edge edge : changeInfo.getCreatedEdges()) { %>

    // Create edge <%= GiraphUtil.getNodeName(edge.getSource()) %> -> <%= GiraphUtil.getNodeName(edge.getTarget()) %>:
<%	// THE SOURCE OF THE NEW EDGE:
   	if (changeInfo.getCreatedNodes().contains(edge.getSource())) { %>
    newVertexId = Arrays.copyOf(thisVertexId, thisVertexId.length + 1);
    newVertexId[newVertexId.length - 1] = <%= changeInfo.getCreatedNodes().indexOf(edge.getSource()) %>;
    BytesWritable src<%= e %> = new BytesWritable(newVertexId);
<%	} else { %>
    BytesWritable src<%= e %> = getMatchVertexId(match, <%= orderedLhsNodes.indexOf(
                                  rule.getMappings().getOrigin(edge.getSource())) %>);
<%	}
	// THE TARGET OF THE NEW EDGE:
   	if (changeInfo.getCreatedNodes().contains(edge.getTarget())) { %>
    newVertexId = Arrays.copyOf(thisVertexId, thisVertexId.length + 1);
    newVertexId[newVertexId.length - 1] = <%= changeInfo.getCreatedNodes().indexOf(edge.getTarget()) %>;
    BytesWritable trg<%= e %> = new BytesWritable(newVertexId);
<%	} else { %>
    BytesWritable trg<%= e %> = getMatchVertexId(match, <%= orderedLhsNodes.indexOf(
                                  rule.getMappings().getOrigin(edge.getTarget())) %>);
<%	} %>
    Edge<BytesWritable, IntWritable> edge<%= e %> =
      EdgeFactory.create(trg<%= e %>, new IntWritable(<%= typeConstants.get(edge.getType()) %>));
    addEdgeRequest(src<%= e %>, edge<%= e %>);
<%  e++;
    } %>
  }

  /**
   * Henshin input format.
   */
  public static class HenshinInputFormat extends
    TextVertexInputFormat<BytesWritable, IntWritable, IntWritable> {

    @Override
    public TextVertexReader createVertexReader(InputSplit split,
      TaskAttemptContext context) {
      return new HenshinInputReader();
    }

    /**
     * Henshin input reader.
     */
    class HenshinInputReader extends
      TextVertexReaderFromEachLineProcessedHandlingExceptions<JSONArray,
        JSONException> {

      @Override
      protected JSONArray preprocessLine(Text line) throws JSONException {
        return new JSONArray(line.toString());
      }

      @Override
      protected BytesWritable getId(JSONArray jsonVertex)
        throws JSONException, IOException {
        return jsonArrayToBytesWritable(jsonVertex.getJSONArray(0));
      }

      /**
       * Convert a JSON array to a BytesWritable object.
       * @param jsonArray The JSON array to be converted.
       * @return The corresponding BytesWritable.
       */
      private BytesWritable jsonArrayToBytesWritable(JSONArray jsonArray)
        throws JSONException {
        byte[] bytes = new byte[jsonArray.length()];
        for (int i = 0; i < bytes.length; i++) {
          bytes[i] = (byte) jsonArray.getInt(i);
        }
        return new BytesWritable(bytes);
      }

      @Override
      protected IntWritable getValue(JSONArray jsonVertex)
        throws JSONException, IOException {
        return new IntWritable(jsonVertex.getInt(1));
      }

      @Override
      protected Iterable<Edge<BytesWritable, IntWritable>> getEdges(
        JSONArray jsonVertex) throws JSONException, IOException {
        JSONArray jsonEdgeArray = jsonVertex.getJSONArray(2);
        List<Edge<BytesWritable, IntWritable>> edges =
          Lists.newArrayListWithCapacity(jsonEdgeArray.length());
        for (int i = 0; i < jsonEdgeArray.length(); ++i) {
          JSONArray jsonEdge = jsonEdgeArray.getJSONArray(i);
          edges.add(EdgeFactory.create(jsonArrayToBytesWritable(
            jsonEdge.getJSONArray(0)), new IntWritable(jsonEdge.getInt(1))));
        }
        return edges;
      }

      @Override
      protected Vertex<BytesWritable, IntWritable, IntWritable>
      handleException(Text line, JSONArray jsonVertex, JSONException e) {
        throw new IllegalArgumentException(
          "Couldn't get vertex from line " + line, e);
      }
    }
  }

  /**
   * Henshin output format.
   */
  public static class HenshinOutputFormat extends
    TextVertexOutputFormat<BytesWritable, IntWritable, IntWritable> {

    @Override
    public TextVertexWriter createVertexWriter(TaskAttemptContext context)
      throws IOException, InterruptedException {
      return new HenshinOutputWriter();
    }

    /**
     * Henshin output writer.
     */
    class HenshinOutputWriter extends TextVertexWriterToEachLine {

      @Override
      protected Text convertVertexToLine(
        Vertex<BytesWritable, IntWritable, IntWritable> vertex)
        throws IOException {

        JSONArray vertexArray = new JSONArray();
        JSONArray idArray = new JSONArray();
        byte[] id = vertex.getId().getBytes();
        for (int i = 0; i < id.length; i++) {
          idArray.put(id[i]);
        }
        vertexArray.put(idArray);
        vertexArray.put(vertex.getValue().get());
        JSONArray allEdgesArray = new JSONArray();
        for (Edge<BytesWritable, IntWritable> edge : vertex.getEdges()) {
          JSONArray edgeArray = new JSONArray();
          JSONArray targetIdArray = new JSONArray();
          byte[] targetId = edge.getTargetVertexId().getBytes();
          for (int i = 0; i < targetId.length; i++) {
            targetIdArray.put(targetId[i]);
          }
          edgeArray.put(targetIdArray);
          edgeArray.put(edge.getValue().get());
          allEdgesArray.put(edgeArray);
        }
        vertexArray.put(allEdgesArray);
        return new Text(vertexArray.toString());
      }
    }
  }
}
