<%@ jet package="org.eclipse.emf.henshin.interpreter.ui.giraph" class="GiraphRuleTemplate" 
imports="java.util.* org.eclipse.emf.henshin.model.* org.eclipse.emf.henshin.interpreter.ui.giraph.GiraphUtil org.eclipse.emf.henshin.interpreter.ui.giraph.GiraphUtil.MatchingStep org.eclipse.emf.ecore.*" %>

<%

@SuppressWarnings("unchecked")
Map<String,Object> args = (Map<String,Object>) argument;

Rule rule = (Rule) args.get("rule");
String className = (String) args.get("className");

Map<ENamedElement,String> typeConstants = GiraphUtil.getTypeConstants(rule.getModule());
List<MatchingStep> matchingSteps = GiraphUtil.getMatchingSteps(rule);

%>
import org.apache.log4j.Logger;

public class <%= className %> extends BasicComputation {

<%
int value = 0;
for (ENamedElement type : typeConstants.keySet()) {
	%>
	public static final int <%= typeConstants.get(type) %> = <%= value++ %>;
	<%
}
%>
	private static Logger LOG = Logger.getLogger(<%= className %>.class);


	@Override
	public void compute(
      Vertex<LongWritable, DoubleWritable, FloatWritable> vertex,
      Iterable<DoubleWritable> messages) throws IOException {		
<% 
		for (int i=0; i<matchingSteps.size(); i++) {
			MatchingStep step = matchingSteps.get(i);
%>		
		<%= i>0 ? "else " : "" %>if (getSuperStep()==<%= i %>) {

			// Check whether this vertex is a possible match for node <%= GiraphUtil.getNodeName(step.node) %>:
			
			<% if (i==0) { %>
			// Create a new partial match:
			<% } else { %>
			// For every partial match (incoming message) do:
			<% } %>
			
				<% if (step.edge!=null) { %>
			    // Send a match request to all outgoing edges of type "<%= step.edge.getType().getName() %>":
			    
				<% } %>
				
			<% if (i>0) { %>
			<% } else { %>
			<% } %>
			
		}

<% 
		} // end for
%>		
		// Next nodes are activated by a message, so we can stop:
		voteForHalt();		
	
	}



}
