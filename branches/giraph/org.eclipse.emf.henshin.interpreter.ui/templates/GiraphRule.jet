<%@ jet package="org.eclipse.emf.henshin.interpreter.ui.giraph" class="GiraphRuleTemplate" 
imports="java.util.* org.eclipse.emf.henshin.model.* org.eclipse.emf.henshin.interpreter.info.* org.eclipse.emf.henshin.interpreter.ui.giraph.GiraphUtil org.eclipse.emf.henshin.interpreter.ui.giraph.GiraphUtil.MatchingStep org.eclipse.emf.ecore.*" %>
<%

@SuppressWarnings("unchecked")
Map<String,Object> args = (Map<String,Object>) argument;

Rule rule = (Rule) args.get("rule");
RuleChangeInfo changeInfo = new RuleChangeInfo(rule);

String className = (String) args.get("className");

Map<ENamedElement,String> typeConstants = GiraphUtil.getTypeConstants(rule.getModule());
List<MatchingStep> matchingSteps = GiraphUtil.getMatchingSteps(rule);

List<Node> orderedLhsNodes = new ArrayList<Node>();
for (MatchingStep step : matchingSteps) {
  if (step.node!=null && !orderedLhsNodes.contains(step.node)) {
    orderedLhsNodes.add(step.node);
  }
}

%>
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.giraph.examples;

import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;

import org.apache.giraph.edge.Edge;
import org.apache.giraph.edge.EdgeFactory;
import org.apache.giraph.graph.BasicComputation;
import org.apache.giraph.graph.Vertex;
import org.apache.hadoop.io.IntWritable;
import org.apache.log4j.Logger;

/**
 * Generated implementation of the Henshin rule "<%= rule.getName() %>".
 */
@Algorithm(
    name = "<%= rule.getName() %>"
)
public class <%= className %> extends
  BasicComputation<HenshinUtil.Bytes, IntWritable,
  IntWritable, HenshinUtil.Bytes> {
<%
int value = 0;
for (ENamedElement type : typeConstants.keySet()) {
  %>

  /**
   * Type constant for "<%= type.getName() %>".
   */
  public static final int <%= typeConstants.get(type) %> = <%= value++ %>;
<%
}
%>

  /**
   * Logging support.
   */
  private static final Logger LOG = Logger.getLogger(<%= className %>.class);

  /*
   * (non-Javadoc)
   * @see org.apache.giraph.graph.Computation#compute(
   *        org.apache.giraph.graph.Vertex, java.lang.Iterable)
   */
  @Override
  public void compute(
      Vertex<HenshinUtil.Bytes, IntWritable, IntWritable> vertex,
      Iterable<HenshinUtil.Bytes> matches) throws IOException {

    long superstep = getSuperstep();

    // Log partial matches:
    LOG.info("Executing superstep " + superstep);
    for (HenshinUtil.Bytes match : matches) {
      LOG.info("Received partial match: " + HenshinUtil.matchToString(match));
    }


<% 
    for (int i=0; i<matchingSteps.size(); i++) {
      MatchingStep step = matchingSteps.get(i);
%><%= i>0 ? " else" : "   " %> if (superstep == <%= i %>) {

<%    if (step.verifyEdgeTo >= 0) {%>
      // Node <%= GiraphUtil.getNodeName(step.edge.getSource()) %>: check for edge to match of <%= GiraphUtil.getNodeName(step.edge.getTarget()) %> of type "<%= step.edge.getType().getName() %>":
      List<HenshinUtil.Bytes> validMatches = new ArrayList<HenshinUtil.Bytes>();
      Iterator<HenshinUtil.Bytes> it = matches.iterator();
      while (it.hasNext()) {
        HenshinUtil.Bytes match = it.next();
        HenshinUtil.Bytes targetId = HenshinUtil.getMatchVertexId(match, <%= step.verifyEdgeTo %>);
        for (Edge<HenshinUtil.Bytes, IntWritable> edge : vertex.getEdges()) {
          if (edge.getValue().get() == <%= typeConstants.get(step.edge.getType()) %> &&
              edge.getTargetVertexId().equals(targetId)) {
            validMatches.add(match);
            break;
          }
        }
      }
      matches = validMatches;

<%    } else {%>
      // Matching node <%= GiraphUtil.getNodeName(step.node) %>. Type must be "<%= step.node.getType().getName() %>":
      boolean ok = vertex.getValue().get() == <%= typeConstants.get(step.node.getType()) %>;
      if (ok) {
<%    if (i == 0) {%>
        // Create a new partial match:
        HenshinUtil.Bytes match =
          HenshinUtil.addMatchVertex(null, vertex.getId());
        <% } else {%>
        // Extend all partial matches:
        for (HenshinUtil.Bytes match : matches) {
          match = HenshinUtil.addMatchVertex(match, vertex.getId());
<%    }
      if (step.edge != null) {%>
<%= i > 0 ? "  " : ""%>        // Send a match request to all outgoing edges of type "<%= step.edge.getType().getName() %>":
<%= i > 0 ? "  " : ""%>        for (Edge<HenshinUtil.Bytes, IntWritable> edge : vertex.getEdges()) {
<%= i > 0 ? "  " : ""%>          if (edge.getValue().get() == <%= typeConstants.get(step.edge.getType()) %>) {
<%= i > 0 ? "  " : ""%>            LOG.info("Sending partial match: " +
<%= i > 0 ? "  " : ""%>              HenshinUtil.matchToString(match));
<%= i > 0 ? "  " : ""%>            sendMessage(edge.getTargetVertexId(), match);
<%= i > 0 ? "  " : ""%>          }
<%= i > 0 ? "  " : ""%>        }
<%    } else if (step.sendBackTo >= 0) {%>
          // Send the message back to matches of node <%= GiraphUtil.getNodeName(matchingSteps.get(step.sendBackTo).node) %>:
          for (HenshinUtil.Bytes m : matches) {
            LOG.info("Sending partial match: " +
              HenshinUtil.matchToString(match));
            sendMessage(HenshinUtil.getMatchVertexId(m, <%= step.sendBackTo %>), match);
          }
<%    }
      if (i>0) {%>
        }<%
       }%>
      } // end if ok

<%    }
      if (i == matchingSteps.size()-1) {%>
      // Apply rule for all matches:
      for (HenshinUtil.Bytes match : matches) {
        applyRule(vertex, match);
      }
<%
      } else {%>
      // Next vertices are activated by a message, so we sleep:
      vertex.voteToHalt();
<%
      }%>

    }<% 

    } // end for

%> else if (superstep == <%= matchingSteps.size() %>) {

      // Rule application finished. So we halt:
      vertex.voteToHalt();

    }

  }

  /**
   * Apply the rule to a given match.
   * @param vertex The base vertex.
   * @param match The match object.
   * @throws IOException On I/O errors.
   */
  private void applyRule(Vertex<HenshinUtil.Bytes, IntWritable,
    IntWritable> vertex, HenshinUtil.Bytes match) throws IOException {

    LOG.info("Applying rule with match " + HenshinUtil.matchToString(match));
<%  for (Edge edge : changeInfo.getDeletedEdges()) {%>

    // Remove edge <%= GiraphUtil.getNodeName(edge.getSource()) %> -> <%= GiraphUtil.getNodeName(edge.getTarget()) %>:
    removeEdgesRequest(
      HenshinUtil.getMatchVertexId(match, <%= orderedLhsNodes.indexOf(edge.getSource()) %>),
      HenshinUtil.getMatchVertexId(match, <%= orderedLhsNodes.indexOf(edge.getTarget()) %>)
    );
<%  }
    for (Node node : changeInfo.getDeletedNodes()) {%>

    // Remove vertex <%= GiraphUtil.getNodeName(node) %>:
    removeVertexRequest(
      HenshinUtil.getMatchVertexId(match, <%= orderedLhsNodes.indexOf(node) %>)
    );
<%  } 

    if (!changeInfo.getCreatedNodes().isEmpty()) {
%>
    byte[] thisVertexId = vertex.getId().getBytes();
    byte[] newVertexId;
<%	}
    int n = 0;
    for (Node node : changeInfo.getCreatedNodes()) {%>

    // Create vertex <%= GiraphUtil.getNodeName(node) %>:
    newVertexId = Arrays.copyOf(thisVertexId, thisVertexId.length + 1);
    newVertexId[newVertexId.length - 1] = <%= n++ %>;
    addVertexRequest(new HenshinUtil.Bytes(newVertexId),
      new IntWritable(<%= typeConstants.get(node.getType()) %>));
<%  }

    int e = 0;
    for (Edge edge : changeInfo.getCreatedEdges()) { %>

    // Create edge <%= GiraphUtil.getNodeName(edge.getSource()) %> -> <%= GiraphUtil.getNodeName(edge.getTarget()) %>:
<%	// THE SOURCE OF THE NEW EDGE:
   	if (changeInfo.getCreatedNodes().contains(edge.getSource())) { %>
    newVertexId = Arrays.copyOf(thisVertexId, thisVertexId.length + 1);
    newVertexId[newVertexId.length - 1] = <%= changeInfo.getCreatedNodes().indexOf(edge.getSource()) %>;
    HenshinUtil.Bytes src<%= e %> = new HenshinUtil.Bytes(newVertexId);
<%	} else { %>
    HenshinUtil.Bytes src<%= e %> = HenshinUtil.getMatchVertexId(match, <%= orderedLhsNodes.indexOf(
                                  rule.getMappings().getOrigin(edge.getSource())) %>);
<%	}
	// THE TARGET OF THE NEW EDGE:
   	if (changeInfo.getCreatedNodes().contains(edge.getTarget())) { %>
    newVertexId = Arrays.copyOf(thisVertexId, thisVertexId.length + 1);
    newVertexId[newVertexId.length - 1] = <%= changeInfo.getCreatedNodes().indexOf(edge.getTarget()) %>;
    HenshinUtil.Bytes trg<%= e %> = new HenshinUtil.Bytes(newVertexId);
<%	} else { %>
    HenshinUtil.Bytes trg<%= e %> = HenshinUtil.getMatchVertexId(match, <%= orderedLhsNodes.indexOf(
                                  rule.getMappings().getOrigin(edge.getTarget())) %>);
<%	} %>
    Edge<HenshinUtil.Bytes, IntWritable> edge<%= e %> =
      EdgeFactory.create(trg<%= e %>, new IntWritable(<%= typeConstants.get(edge.getType()) %>));
    addEdgeRequest(src<%= e %>, edge<%= e %>);
<%  e++;
    } %>

  }

}
